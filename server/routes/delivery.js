const express = require('express');const router = express.Router();const axios = require('axios');const crypto = require('crypto');const config = require('../config/keys');const API_BASE_URL = config.NINJAVAN_API_URL || 'https://api.ninjavan.co';const COUNTRY_CODE = config.NINJAVAN_COUNTRY_CODE || 'SG';const CLIENT_ID = config.NINJAVAN_CLIENT_ID;const CLIENT_SECRET = config.NINJAVAN_CLIENT_SECRET;async function getNinjaVanToken() {  try {    const response = await axios.post(`${API_BASE_URL}/${COUNTRY_CODE}/2.0/oauth/access_token`, {      client_id: CLIENT_ID,      client_secret: CLIENT_SECRET,      grant_type: "client_credentials"    });    return response.data.access_token;  } catch (error) {    console.error('Error getting NinjaVan access token:', error.response?.data || error.message);    throw new Error('Failed to authenticate with NinjaVan');  }}router.post('/ninjavan/create-order', async (req, res) => {  try {    const token = await getNinjaVanToken();    const orderData = req.body;    const response = await axios.post(      `${API_BASE_URL}/${COUNTRY_CODE}/4.2/orders`,       orderData,      {         headers: {           'Authorization': `Bearer ${token}`,          'Content-Type': 'application/json'        }       }    );    res.status(200).json(response.data);  } catch (error) {    console.error('Error creating NinjaVan order:', error.response?.data || error.message);    res.status(error.response?.status || 500).json({       error: 'Failed to create delivery order',      details: error.response?.data || error.message    });  }});router.get('/ninjavan/tracking/:trackingId', async (req, res) => {  try {    const trackingInfo = {      trackingId: req.params.trackingId,      status: "Pending Pickup",       lastUpdate: new Date().toISOString(),    };    res.status(200).json(trackingInfo);  } catch (error) {    console.error('Error fetching tracking info:', error.message);    res.status(500).json({ error: 'Failed to retrieve tracking information' });  }});router.get('/ninjavan/waybill/:trackingId', async (req, res) => {  try {    const token = await getNinjaVanToken();    const trackingId = req.params.trackingId;    const response = await axios.get(      `${API_BASE_URL}/${COUNTRY_CODE}/2.0/reports/waybill?tid=${trackingId}`,      {         headers: {           'Authorization': `Bearer ${token}`         },        responseType: 'arraybuffer'      }    );    res.setHeader('Content-Type', 'application/pdf');    res.setHeader('Content-Disposition', `attachment; filename="waybill-${trackingId}.pdf"`);    res.status(200).send(response.data);  } catch (error) {    console.error('Error generating waybill:', error.response?.data || error.message);    res.status(error.response?.status || 500).json({       error: 'Failed to generate waybill',      details: error.response?.data || error.message    });  }});router.delete('/ninjavan/orders/:trackingId', async (req, res) => {  try {    const token = await getNinjaVanToken();    const trackingId = req.params.trackingId;    const response = await axios.delete(      `${API_BASE_URL}/${COUNTRY_CODE}/2.2/orders/${trackingId}`,      {         headers: {           'Authorization': `Bearer ${token}`         }       }    );    res.status(200).json(response.data);  } catch (error) {    console.error('Error cancelling order:', error.response?.data || error.message);    res.status(error.response?.status || 500).json({       error: 'Failed to cancel delivery order',      details: error.response?.data || error.message    });  }});router.post('/ninjavan/webhooks', express.json(), async (req, res) => {  try {    const receivedHmac = req.headers['x-ninjavan-hmac-sha256'];    const calculatedHmac = crypto      .createHmac('sha256', CLIENT_SECRET)      .update(JSON.stringify(req.body))      .digest('base64');    if (receivedHmac !== calculatedHmac) {      console.error('Invalid webhook signature');      return res.status(401).send('Invalid signature');    }    const trackingData = req.body;    const trackingId = trackingData.tracking_id;    const status = trackingData.status;    const event = trackingData.event;    console.log(`Received tracking update for ${trackingId}: ${event}`);    return res.status(200).send('Webhook received');  } catch (error) {    console.error('Error processing webhook:', error.message);    return res.status(500).send('Error processing webhook');  }});module.exports = router; 